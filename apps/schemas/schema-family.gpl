# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type ThongTinLuotKham {
  luotkhamId: ID!
}

type DMVatTu {
  maVT: ID!
  tenVT: String!
  soTT: Float!
}

type SuatAnChiTiet {
  id: ID!
  phieuId: Float!
  soluong: Float
  gia: Float
  thanhtien: Float
  suatan: SuatAn!
  vattu: DMVatTu!
}

type SuatAn {
  phieuId: ID!
  luotkhamId: Float!
  benhnhanId: Float!
  buoiId: Float!
  buoi: String!
  diengiai: String
  ngaygioduyet: Date
  thongtinluotkham: ThongTinLuotKham
  suatanchitiets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: SuatAnChiTietFilter = {}

    """Specify to sort results."""
    sorting: [SuatAnChiTietSort!] = []
  ): SuatAnSuatanchitietsConnection!
}

"""Date custom scalar type"""
scalar Date

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input SuatAnChiTietFilter {
  and: [SuatAnChiTietFilter!]
  or: [SuatAnChiTietFilter!]
  id: IDFilterComparison
  phieuId: NumberFieldComparison
  soluong: NumberFieldComparison
  gia: NumberFieldComparison
  thanhtien: NumberFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input SuatAnChiTietSort {
  field: SuatAnChiTietSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SuatAnChiTietSortFields {
  id
  phieuId
  soluong
  gia
  thanhtien
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type SuatAnConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SuatAn!]!
}

type SuatAnAggregateGroupBy {
  phieuId: ID
  luotkhamId: Float
  benhnhanId: Float
  buoiId: Float
  diengiai: String
  ngaygioduyet: Date
}

type SuatAnCountAggregate {
  phieuId: Int
  luotkhamId: Int
  benhnhanId: Int
  buoiId: Int
  diengiai: Int
  ngaygioduyet: Int
}

type SuatAnSumAggregate {
  phieuId: Float
  luotkhamId: Float
  benhnhanId: Float
  buoiId: Float
}

type SuatAnAvgAggregate {
  phieuId: Float
  luotkhamId: Float
  benhnhanId: Float
  buoiId: Float
}

type SuatAnMinAggregate {
  phieuId: ID
  luotkhamId: Float
  benhnhanId: Float
  buoiId: Float
  diengiai: String
  ngaygioduyet: Date
}

type SuatAnMaxAggregate {
  phieuId: ID
  luotkhamId: Float
  benhnhanId: Float
  buoiId: Float
  diengiai: String
  ngaygioduyet: Date
}

type SuatAnSuatanchitietsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SuatAnChiTiet!]!
}

type SuatAnChiTietConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SuatAnChiTiet!]!
}

type SuatAnChiTietAggregateGroupBy {
  id: ID
  phieuId: Float
  soluong: Float
  gia: Float
  thanhtien: Float
}

type SuatAnChiTietCountAggregate {
  id: Int
  phieuId: Int
  soluong: Int
  gia: Int
  thanhtien: Int
}

type SuatAnChiTietSumAggregate {
  id: Float
  phieuId: Float
  soluong: Float
  gia: Float
  thanhtien: Float
}

type SuatAnChiTietAvgAggregate {
  id: Float
  phieuId: Float
  soluong: Float
  gia: Float
  thanhtien: Float
}

type SuatAnChiTietMinAggregate {
  id: ID
  phieuId: Float
  soluong: Float
  gia: Float
  thanhtien: Float
}

type SuatAnChiTietMaxAggregate {
  id: ID
  phieuId: Float
  soluong: Float
  gia: Float
  thanhtien: Float
}

type Query {
  suatAn(
    """The id of the record to find."""
    id: ID!
  ): SuatAn
  suatAns(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: SuatAnFilter = {}

    """Specify to sort results."""
    sorting: [SuatAnSort!] = []
  ): SuatAnConnection!
  suatAnChiTiet(
    """The id of the record to find."""
    id: ID!
  ): SuatAnChiTiet
  suatAnChiTiets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: SuatAnChiTietFilter = {}

    """Specify to sort results."""
    sorting: [SuatAnChiTietSort!] = []
  ): SuatAnChiTietConnection!
}

input SuatAnFilter {
  and: [SuatAnFilter!]
  or: [SuatAnFilter!]
  phieuId: IDFilterComparison
  luotkhamId: NumberFieldComparison
  benhnhanId: NumberFieldComparison
  buoiId: NumberFieldComparison
  diengiai: StringFieldComparison
  ngaygioduyet: DateFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input SuatAnSort {
  field: SuatAnSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SuatAnSortFields {
  phieuId
  luotkhamId
  benhnhanId
  buoiId
  diengiai
  ngaygioduyet
}
