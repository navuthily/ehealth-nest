# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type thongtinluotkham {
  luotkhamId: Float!
}

type Posph66EhH {
  id: Float!
  luotkhamId: Float!
  ngay_ct: DateTime!
  thongtinluotkham: thongtinluotkham
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type Posph66EhHDeleteResponse {
  id: Float
  luotkhamId: Float
  ngay_ct: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type Posph66EhHEdge {
  """The node containing the Posph66EhH"""
  node: Posph66EhH!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Posph66EhHConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [Posph66EhHEdge!]!
}

type Posph66EhHAggregateGroupBy {
  id: Float
  luotkhamId: Float
  ngay_ct: DateTime
}

type Posph66EhHCountAggregate {
  id: Int
  luotkhamId: Int
  ngay_ct: Int
}

type Posph66EhHSumAggregate {
  id: Float
  luotkhamId: Float
}

type Posph66EhHAvgAggregate {
  id: Float
  luotkhamId: Float
}

type Posph66EhHMinAggregate {
  id: Float
  luotkhamId: Float
  ngay_ct: DateTime
}

type Posph66EhHMaxAggregate {
  id: Float
  luotkhamId: Float
  ngay_ct: DateTime
}

type Query {
  posph66EhH(
    """The id of the record to find."""
    id: ID!
  ): Posph66EhH
  posph66EhHS(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: Posph66EhHFilter = {}

    """Specify to sort results."""
    sorting: [Posph66EhHSort!] = []
  ): Posph66EhHConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input Posph66EhHFilter {
  and: [Posph66EhHFilter!]
  or: [Posph66EhHFilter!]
  id: NumberFieldComparison
  luotkhamId: NumberFieldComparison
  ngay_ct: DateFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input Posph66EhHSort {
  field: Posph66EhHSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum Posph66EhHSortFields {
  id
  luotkhamId
  ngay_ct
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOnePosph66EhH(input: CreateOnePosph66EhHInput!): Posph66EhH!
  createManyPosph66EhHS(input: CreateManyPosph66EhHSInput!): [Posph66EhH!]!
  updateOnePosph66EhH(input: UpdateOnePosph66EhHInput!): Posph66EhH!
  updateManyPosph66EhHS(input: UpdateManyPosph66EhHSInput!): UpdateManyResponse!
  deleteOnePosph66EhH(input: DeleteOnePosph66EhHInput!): Posph66EhHDeleteResponse!
  deleteManyPosph66EhHS(input: DeleteManyPosph66EhHSInput!): DeleteManyResponse!
}

input CreateOnePosph66EhHInput {
  """The record to create"""
  posph66EhH: CreatePosph66EhH!
}

input CreatePosph66EhH {
  id: Float
  luotkhamId: Float
  ngay_ct: DateTime
}

input CreateManyPosph66EhHSInput {
  """Array of records to create"""
  posph66EhHS: [CreatePosph66EhH!]!
}

input UpdateOnePosph66EhHInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePosph66EhH!
}

input UpdatePosph66EhH {
  id: Float
  luotkhamId: Float
  ngay_ct: DateTime
}

input UpdateManyPosph66EhHSInput {
  """Filter used to find fields to update"""
  filter: Posph66EhHUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePosph66EhH!
}

input Posph66EhHUpdateFilter {
  and: [Posph66EhHUpdateFilter!]
  or: [Posph66EhHUpdateFilter!]
  id: NumberFieldComparison
  luotkhamId: NumberFieldComparison
  ngay_ct: DateFieldComparison
}

input DeleteOnePosph66EhHInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPosph66EhHSInput {
  """Filter to find records to delete"""
  filter: Posph66EhHDeleteFilter!
}

input Posph66EhHDeleteFilter {
  and: [Posph66EhHDeleteFilter!]
  or: [Posph66EhHDeleteFilter!]
  id: NumberFieldComparison
  luotkhamId: NumberFieldComparison
  ngay_ct: DateFieldComparison
}
